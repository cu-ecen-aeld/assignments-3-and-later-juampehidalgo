#!/bin/bash
# Sample init script for the scull driver module <rubini@linux.it>

DEVICE="aesdchar"
SECTION="misc"

# The list of filenames and minor numbers: $PREFIX is prefixed to all names
PREFIX="aesdchar"
FILES="     0 0"

INSMOD=/sbin/insmod; # use /sbin/modprobe if you prefer

function device_specific_post_load () {
    true; # fill at will
}
function device_specific_pre_unload () {
    true; # fill at will
}

# Everything below this line should work unchanged for any char device.
# Obviously, however, no options on the command line: either in
# /etc/${DEVICE}.conf or /etc/modules.conf (if modprobe is used)

# Optional configuration file: format is
#    owner  <ownername>
#    group  <groupname>
#    mode   <modename>
#    options <insmod options>
CFG=/etc/${DEVICE}.conf

# kernel version, used to look for modules
KERNEL=`uname -r`

#FIXME: it looks like there is no misc section. Where should it be?
MODDIR="/lib/modules/${KERNEL}/kernel/drivers/${SECTION}"
if [ ! -d $MODDIR ]; then MODDIR="/lib/modules/${KERNEL}/${SECTION}"; fi

# Root or die
if [ "$(id -u)" != "0" ]
then
  echo "You must be root to load or unload kernel modules"
  exit 1
fi

# Read configuration file
if [ -r $CFG ]; then
    OWNER=`awk "\\$1==\"owner\" {print \\$2}" $CFG`
    GROUP=`awk "\\$1==\"group\" {print \\$2}" $CFG`
    MODE=`awk "\\$1==\"mode\" {print \\$2}" $CFG`
    # The options string may include extra blanks or only blanks
    OPTIONS=`sed -n '/^options / s/options //p' $CFG`
else
    OWNER="root"
    # Group: since distributions do it differently, look for wheel or use staff
    if grep -q '^staff:' /etc/group; then
        GROUP="staff"
    else
        GROUP="wheel"
    fi
    MODE="666"
fi


# Create device file
function create_file () {
    cd /dev
    mknod ${DEVICE} c $MAJOR 0
    if [ -n "$OWNER" ]; then chown $OWNER ${DEVICE}; fi
    if [ -n "$GROUP" ]; then chgrp $GROUP ${DEVICE}; fi
    if [ -n "$MODE"  ]; then chmod $MODE  ${DEVICE}; fi
}

# Remove device file
function remove_file () {
    cd /dev
    rm -f ${DEVICE}
}

# Load and create files
function load_device () {
    
    if [ -f $MODDIR/$DEVICE.ko ]; then
    echo -n "Loading module from ${MODDIR}"
	devpath=$MODDIR/$DEVICE.ko
    else if [ -f ./$DEVICE.ko ]; then
    LOCATION=`pwd`
    echo -n "Loading module from ${LOCATION}"
	devpath=./$DEVICE.ko
    else
    echo -n "Expecting insmod/modprobe to resolve module location"
	devpath=$DEVICE; # let insmod/modprobe guess
    fi; fi
    if [ "$devpath" != "$DEVICE" ]; then
	echo -n " (loading file $devpath)"
    fi

    if $INSMOD $devpath $OPTIONS; then
	MAJOR=`awk "\\$2==\"$DEVICE\" {print \\$1}" /proc/devices`
	remove_file
	create_file
	device_specific_post_load
    else
	echo " FAILED!"
     fi
}

# Unload and remove files
function unload_device () {
    device_specific_pre_unload 
    /sbin/rmmod $DEVICE
    remove_file
}


case "$1" in
  start)
     echo -n "Loading $DEVICE"
     load_device
     echo "."
     ;;
  stop)
     echo -n "Unloading $DEVICE"
     unload_device
     echo "."
     ;;
  force-reload|restart)
     echo -n "Reloading $DEVICE"
     unload_device
     load_device
     echo "."
     ;;
  *)
     echo "Usage: $0 {start|stop|restart|force-reload}"
     exit 1
esac

exit 0
